name: Deploy from Private Repo

on:
  repository_dispatch:
    types: [trigger-from-private]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set Environment Variables
        run: |
          set -euo pipefail
          echo "BRANCH=${{ github.event.client_payload.branch }}" >> $GITHUB_ENV
          echo "DEPLOY_BACKEND=${{ github.event.client_payload.deploy_backend }}" >> $GITHUB_ENV
          echo "DEPLOY_FRONTEND=${{ github.event.client_payload.deploy_frontend }}" >> $GITHUB_ENV
          echo "FRONTEND_TYPE=${{ github.event.client_payload.frontend_type }}" >> $GITHUB_ENV
          echo "IMAGE_DESC=${{ github.event.client_payload.image_description }}" >> $GITHUB_ENV

      - name: Checkout Code from Private Repo
        uses: actions/checkout@v4
        with:
          repository: tsp1423/mdm-studio
          ref: ${{ env.BRANCH }}
          token: ${{ secrets.TOKEN_PULL_FROM_PRIVATE_REPO }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: datamanagement-coip

      - name: Deploy Changed Backend Functions (backend/UI_endpoints/*)
        if: env.DEPLOY_BACKEND == 'true'
        run: |
          set -euo pipefail
          echo "Detecting and deploying changed Cloud Functions in backend/UI_endpoints..."

          git fetch --unshallow || true
          git diff --name-only HEAD~1 HEAD > changed_files.txt

          echo "Changed files:"
          cat changed_files.txt

          DOMAIN=$(echo "${{ env.BRANCH }}" | cut -d'/' -f1)

          find backend/UI_endpoints -mindepth 1 -maxdepth 1 -type d | while read -r fn_dir; do
            fn_name=$(basename "$fn_dir")
            if grep -q "^$fn_dir/" changed_files.txt; then
              DEPLOY_FN_NAME="${fn_name}_${DOMAIN}"

              if [[ "$fn_name" == UI_* ]]; then
                ENTRY_POINT="${fn_name#UI_}"
              else
                ENTRY_POINT="$fn_name"
              fi

              echo "Deploying function: $DEPLOY_FN_NAME (entry point: $ENTRY_POINT)"
              gcloud functions deploy "$DEPLOY_FN_NAME" \
                --runtime=python310 \
                --trigger-http \
                --entry-point="$ENTRY_POINT" \
                --source="$fn_dir" \
                --service-account=datamanagement-coip@appspot.gserviceaccount.com \
                --region=us-central1 \
                --allow-unauthenticated \
                --no-gen2 \
                --quiet

              echo "Successfully deployed function: $DEPLOY_FN_NAME"
            else
              echo "No changes in: $fn_name"
            fi
          done

      - name: Check for Changes in Frontend
        id: check_frontend
        run: |
          set -euo pipefail
          git fetch --unshallow || true
          BASE_SHA=$(git merge-base origin/${{ env.BRANCH }} HEAD)
          CHANGED=$(git diff --name-only $BASE_SHA HEAD | grep '^frontend/' || true)

          if [[ -z "$CHANGED" ]]; then
            echo "Frontend not changed."
            echo "CHANGED_FRONTEND=false" >> $GITHUB_ENV
          else
            echo "Frontend has changes."
            echo "CHANGED_FRONTEND=true" >> $GITHUB_ENV
          fi

      - name: Set Docker Image Name and Tag
        run: |
          set -euo pipefail
          IMAGE_NAME=$(echo "${{ env.BRANCH }}" | tr '/' '-')
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

          if [[ "${{ env.DEPLOY_FRONTEND }}" == "true" && "${{ env.FRONTEND_TYPE }}" == "docker" ]]; then
            if [[ "${{ env.CHANGED_FRONTEND }}" == "true" ]]; then
              TAG=$(date +%Y%m%d-%H%M%S)
              echo "Building new Docker image. TAG=$TAG"
            else
              echo "Fetching latest image tag for $IMAGE_NAME from GCR..."
              TAG=$(gcloud artifacts docker images list us-central1-docker.pkg.dev/datamanagement-coip/mdmstudio-ui/${IMAGE_NAME} \
                --sort-by=~UPDATE_TIME \
                --limit=1 \
                --format="value(TAGS)" | cut -d',' -f1)

              if [[ -z "$TAG" ]]; then
                echo "No existing image found and no changes detected to build a new one."
                exit 1
              fi

              echo "Reusing existing image TAG=$TAG"
            fi
            echo "TAG=$TAG" >> $GITHUB_ENV
          fi

          echo "DESC=${{ env.IMAGE_DESC }}" >> $GITHUB_ENV

      - name: Build Frontend Docker Image
        id: build_ui
        if: env.DEPLOY_FRONTEND == 'true' && env.FRONTEND_TYPE == 'docker' && env.CHANGED_FRONTEND == 'true'
        run: |
          set -euo pipefail
          echo "Building Docker image for frontend..."
          gcloud builds submit frontend/ \
            --config=frontend/cloudbuild.yaml \
            --substitutions=_IMAGE=${IMAGE_NAME},_TAG=${TAG},_REPO=mdmstudio-ui,_REGION=us-central1,_DESC="${DESC}" \
            --quiet

      - name: Deploy Frontend (Docker â†’ Cloud Run)
        if: env.DEPLOY_FRONTEND == 'true' && env.FRONTEND_TYPE == 'docker' && startsWith(env.BRANCH, 'retail/')
        run: |
          set -euo pipefail
          DOMAIN=$(echo "${BRANCH}" | cut -d'/' -f1)
          SERVICE_NAME="${DOMAIN}-ui"
          echo "Deploying Docker frontend to Cloud Run service: $SERVICE_NAME"
          gcloud run deploy "$SERVICE_NAME" \
            --image=us-central1-docker.pkg.dev/datamanagement-coip/mdmstudio-ui/${IMAGE_NAME}:${TAG} \
            --platform=managed \
            --region=us-central1 \
            --allow-unauthenticated \
            --quiet

          echo "Successfully deployed frontend to service: $SERVICE_NAME"

      - name: Allow Public Access to Cloud Run
        if: env.DEPLOY_FRONTEND == 'true' && env.FRONTEND_TYPE == 'docker' && startsWith(env.BRANCH, 'retail/')
        run: |
          set -euo pipefail
          DOMAIN=$(echo "${BRANCH}" | cut -d'/' -f1)
          SERVICE_NAME="${DOMAIN}-ui"
          echo "Setting public access on Cloud Run service: $SERVICE_NAME"
          gcloud run services add-iam-policy-binding "$SERVICE_NAME" \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=us-central1 \
            --platform=managed \
            --quiet

      - name: Deploy Frontend (Non-Docker)
        if: env.DEPLOY_FRONTEND == 'true' && env.FRONTEND_TYPE == 'non-docker'
        run: |
          set -euo pipefail
          echo "Deploying Non-Docker Frontend for ${{ env.BRANCH }}"
          # TODO: Add VM/rsync/scp-based deployment logic here
